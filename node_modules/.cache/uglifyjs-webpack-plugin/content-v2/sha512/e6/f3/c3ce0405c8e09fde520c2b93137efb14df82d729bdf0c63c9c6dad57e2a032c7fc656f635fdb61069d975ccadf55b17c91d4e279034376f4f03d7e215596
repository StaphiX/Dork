{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"C:/Users/Dan/Documents/GitHub/Dork/node_modules\\\\source-map-loader\\\\index.js!C:\\\\Users\\\\Dan\\\\Documents\\\\GitHub\\\\Dork\\\\src\\\\server\\\\server.js\",\"external \\\"express\\\"\",\"external \\\"http\\\"\",\"external \\\"socket.io\\\"\",\"C:/Users/Dan/Documents/GitHub/Dork/node_modules\\\\source-map-loader\\\\index.js!C:\\\\Users\\\\Dan\\\\Documents\\\\GitHub\\\\Dork\\\\src\\\\server\\\\gameServer.js\",\"external \\\"fs\\\"\",\"C:/Users/Dan/Documents/GitHub/Dork/node_modules\\\\source-map-loader\\\\index.js!C:\\\\Users\\\\Dan\\\\Documents\\\\GitHub\\\\Dork\\\\src\\\\common\\\\clientPlayer.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"express\",\"http\",\"socketIO\",\"GameServer\",\"app\",\"server\",\"createServer\",\"io\",\"req\",\"res\",\"sendfile\",\"gameServer\",\"on\",\"socket\",\"connectToGame\",\"color\",\"console\",\"log\",\"sockets\",\"emit\",\"listen\",\"require\",\"ClientState\",\"PlayerType\",\"PlayMode\",\"NONE\",\"WAITINGFORMASTER\",\"WAITINGFORPLAYERS\",\"READY\",\"INGAME\",\"GameState\",\"[object Object]\",\"this\",\"playmode\",\"host\",\"master\",\"playerList\",\"playerType\",\"HOST\",\"setPlayMode\",\"push\",\"MASTER\",\"player\",\"PLAYER\",\"client\",\"JSON\",\"stringify\",\"addHost\",\"addMaster\",\"addPlayer\",\"playerID\",\"iPlayer\",\"length\",\"attributes\",\"ipaddress\",\"selectedPlayer\",\"Game\",\"gameState\",\"playerCount\",\"socketID\",\"clientIp\",\"storedID\",\"storedPlayer\",\"getClient\",\"getClientByIP\",\"connection\",\"sendCreateMessage\",\"addConnection\",\"getState\",\"getHost\",\"getMaster\",\"clientState\",\"data\",\"sendMessage\",\"game\",\"handshake\",\"query\",\"clientIP\",\"request\",\"remoteAddress\",\"connect\",\"id\",\"messageType\",\"to\",\"connected\",\"GameClient\",\"messageCreate\",\"GamePlayer\",\"super\",\"GameMaster\",\"GameHost\",\"refreshPlayers\",\"handleMessage\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 0);\\n\",\"const express = require('express')\\r\\nconst http = require('http')\\r\\nconst socketIO = require('socket.io')\\r\\n//const login = require('./login.js');\\r\\nconst GameServer = require('./gameServer.js');\\r\\n\\r\\n// our localhost port\\r\\nconst port = 4001\\r\\n\\r\\nconst app = express()\\r\\n\\r\\n// our server instance\\r\\nconst server = http.createServer(app)\\r\\n\\r\\n// This creates our socket using the instance of the server\\r\\nconst io = socketIO(server)\\r\\n\\r\\napp.get('*', function(req, res) {\\r\\n  res.sendfile('./public/index.html');\\r\\n});\\r\\n\\r\\nconst gameServer = new GameServer(io);\\r\\n\\r\\n// This is what the socket.io syntax is like, we will work this later\\r\\nio.on('connection', socket => \\r\\n{\\r\\n  gameServer.connectToGame(socket);\\r\\n\\r\\n  // just like on the client side, we have a socket.on method that takes a callback function\\r\\n  socket.on('change color', (color) => {\\r\\n    // once we get a 'change color' event from one of our clients, we will send it to the rest of the clients\\r\\n    // we make use of the socket.emit method again with the argument given to use from the callback function above\\r\\n    console.log('Color Changed to: ', color)\\r\\n    io.sockets.emit('change color', color)\\r\\n  })\\r\\n  \\r\\n  // disconnect is fired when a client leaves the server\\r\\n  socket.on('disconnect', () => {\\r\\n    console.log('user disconnected')\\r\\n  })\\r\\n})\\r\\n\\r\\nserver.listen(port, () => console.log(`Listening on port ${port}`))\\r\\n\\r\\n\",\"module.exports = require(\\\"express\\\");\",\"module.exports = require(\\\"http\\\");\",\"module.exports = require(\\\"socket.io\\\");\",\"const fs = require('fs');\\r\\nvar { ClientState, PlayerType  } = require(\\\"../common/clientPlayer\\\");\\r\\n\\r\\nconst PlayMode = \\r\\n{\\r\\n  NONE: \\\"NONE\\\",\\r\\n  WAITINGFORMASTER: \\\"WAITINGFORMASTER\\\",\\r\\n  WAITINGFORPLAYERS: \\\"WAITINGFORPLAYERS\\\",\\r\\n  READY: \\\"READY\\\",\\r\\n  INGAME: \\\"INGAME\\\",\\r\\n}\\r\\n\\r\\nclass GameState\\r\\n{\\r\\n    constructor()\\r\\n    {\\r\\n        this.playmode = PlayMode.NONE,\\r\\n        this.host = null,\\r\\n        this.master = null,\\r\\n        this.playerList = []\\r\\n    }\\r\\n\\r\\n    setPlayMode(playmode)\\r\\n    {\\r\\n        this.playmode = playmode;\\r\\n        console.log('New Playmode ' + this.playmode);\\r\\n    }\\r\\n\\r\\n    addHost(host)\\r\\n    {\\r\\n        console.log('Add Host');\\r\\n        host.playerType = PlayerType.HOST;\\r\\n        this.host = host;\\r\\n        this.setPlayMode(PlayMode.WAITINGFORMASTER);\\r\\n        this.playerList.push(host);\\r\\n    }\\r\\n\\r\\n    addMaster(master)\\r\\n    {\\r\\n        console.log('Add Master');\\r\\n        master.playerType = PlayerType.MASTER;\\r\\n        this.master = master;\\r\\n        this.setPlayMode(PlayMode.WAITINGFORPLAYERS);\\r\\n        this.playerList.push(master);\\r\\n    }\\r\\n\\r\\n    addPlayer(player)\\r\\n    {\\r\\n        console.log('Add Player');\\r\\n        player.playerType = PlayerType.PLAYER;\\r\\n        this.playerList.push(player);\\r\\n    }\\r\\n\\r\\n    addConnection(client)\\r\\n    {\\r\\n        console.log('Add Connection ' + JSON.stringify(client, null, 4));\\r\\n\\r\\n        if(this.playmode == PlayMode.NONE)\\r\\n            this.addHost(client);\\r\\n        else if(this.playmode == PlayMode.WAITINGFORMASTER)\\r\\n            this.addMaster(client);\\r\\n        else if(this.playmode == PlayMode.WAITINGFORPLAYERS)\\r\\n            this.addPlayer(client);\\r\\n    }\\r\\n\\r\\n    getHost()\\r\\n    {\\r\\n        return this.host;\\r\\n    }\\r\\n\\r\\n    getMaster()\\r\\n    {\\r\\n        return this.master;\\r\\n    }\\r\\n\\r\\n    getClient(playerID)\\r\\n    {\\r\\n        var iPlayer;\\r\\n        for (iPlayer = 0; iPlayer < this.playerList.length; iPlayer++) \\r\\n        {  \\r\\n            console.log(\\\"ID To Find - \\\" + playerID);\\r\\n\\r\\n            var attributes = this.playerList[iPlayer];\\r\\n            console.log(\\\"PLAYER [\\\" + iPlayer + \\\"] \\\\n\\\" + JSON.stringify(attributes));\\r\\n            if(attributes.playerID === playerID)\\r\\n                return this.playerList[iPlayer];\\r\\n        }\\r\\n\\r\\n        return null;\\r\\n    }\\r\\n\\r\\n    getClientByIP(ipaddress)\\r\\n    {\\r\\n        var selectedPlayer = -1;\\r\\n        var iPlayer;\\r\\n        for (iPlayer = 0; iPlayer < this.playerList.length; iPlayer++) \\r\\n        {  \\r\\n            console.log(\\\"IPAddress To Find - \\\" + ipaddress);\\r\\n\\r\\n            var attributes = this.playerList[iPlayer];\\r\\n            console.log(\\\"PLAYER [\\\" + iPlayer + \\\"] \\\\n\\\" + JSON.stringify(attributes));\\r\\n            if(attributes.ipaddress === ipaddress)\\r\\n            {\\r\\n                if(selectedPlayer === -1)\\r\\n                    selectedPlayer = iPlayer;\\r\\n                else\\r\\n                {\\r\\n                    console.log(\\\"Multiple Users Sharing IP\\\");\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(selectedPlayer !== -1)\\r\\n            return this.playerList[selectedPlayer];\\r\\n        else\\r\\n            return null;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Game\\r\\n{\\r\\n    constructor(gameServer) {\\r\\n        this.gameServer = gameServer;\\r\\n        this.gameState = new GameState();\\r\\n        console.log('GameCreated ' + JSON.stringify(this.gameState, null, 4));\\r\\n\\r\\n        this.playerCount = 0;\\r\\n        //this.playerRefreshTimer = setTimeout(this.refreshPlayerList, 4000);\\r\\n    }\\r\\n\\r\\n    connect(socketID, clientIp, storedID, storedPlayer)\\r\\n    {\\r\\n        var client = null;\\r\\n\\r\\n        if(storedID !== null)\\r\\n            client = this.getClient(storedID);\\r\\n\\r\\n        if(client === null)\\r\\n            client = this.getClientByIP(clientIp);\\r\\n\\r\\n        // Attempt to reconnect\\r\\n        if(client !== null)\\r\\n        {\\r\\n            // Check this client matches the details we have stored\\r\\n            if(client.connection === false && (storedPlayer === null || client.playerType === storedPlayer))\\r\\n            {\\r\\n                // Update the client state\\r\\n                client.socketID = socketID;\\r\\n                client.ipaddress = ipaddress;\\r\\n                client.connection = true;\\r\\n\\r\\n                this.sendCreateMessage(client);\\r\\n            }\\r\\n            else\\r\\n            {\\r\\n                client = null;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(client === null)\\r\\n        {\\r\\n            // Create a new connection\\r\\n            this.addConnection(socketID, clientIp);\\r\\n        }\\r\\n\\r\\n        return client;\\r\\n    }\\r\\n\\r\\n    addConnection(socketID, ipaddress)\\r\\n    {\\r\\n        var client = new ClientState(socketID, ipaddress);\\r\\n        this.gameState.addConnection(client);\\r\\n\\r\\n        this.sendCreateMessage(client);\\r\\n\\r\\n        return client;\\r\\n    }\\r\\n\\r\\n    getState()\\r\\n    {\\r\\n        return this.gameState;\\r\\n    }\\r\\n\\r\\n    getHost()\\r\\n    {\\r\\n        return this.getState().getHost();\\r\\n    }\\r\\n\\r\\n    getMaster()\\r\\n    {\\r\\n        return this.getState().getMaster();\\r\\n    }\\r\\n\\r\\n    getClient(playerID)\\r\\n    {\\r\\n        return this.getState().getClient(playerID);\\r\\n    }\\r\\n\\r\\n    getClientByIP(ipaddress)\\r\\n    {\\r\\n        return this.getState().getClientByIP(ipaddress);\\r\\n    }\\r\\n\\r\\n    sendCreateMessage(clientState)\\r\\n    {\\r\\n        var data = { clientState: clientState };\\r\\n        this.gameServer.sendMessage(clientState, 'create', data);\\r\\n    }\\r\\n\\r\\n    refreshPlayerList()\\r\\n    {\\r\\n        var host = this.getState().getHost();\\r\\n        if(this.gameState == null || host == null)\\r\\n            return;\\r\\n            \\r\\n        var playerList = this.gameState.playerList;\\r\\n\\r\\n        if(playerList == null)\\r\\n            return;\\r\\n\\r\\n        var newPlayerCount = playerList.length;\\r\\n\\r\\n        if(newPlayerCount != this.playerCount)\\r\\n        {\\r\\n            var data = { playerList: playerList };\\r\\n            this.gameServer.sendMessage(host, 'refreshPlayers', data);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass GameServer \\r\\n{\\r\\n    constructor(io) {\\r\\n      this.io = io;\\r\\n      this.game = new Game(this);\\r\\n    }\\r\\n  \\r\\n    connectToGame(socket)\\r\\n    {\\r\\n        var storedID = socket.handshake.query['UUID'];\\r\\n        var storedPlayer = socket.handshake.query['playerType'];\\r\\n\\r\\n        var client = null;\\r\\n        var clientIP = socket.request.connection.remoteAddress;\\r\\n\\r\\n        client = this.game.connect(socket.id, clientIP, storedID, storedPlayer);\\r\\n    }\\r\\n\\r\\n    sendMessage(clientState, messageType, data)\\r\\n    {\\r\\n        console.log(\\\"Sending Msg - \\\" + clientState.playerType + \\\" - \\\" + messageType);\\r\\n\\r\\n        data.messageType = messageType;\\r\\n\\r\\n        if(clientState != null)\\r\\n            this.io.to(`${clientState.socketID}`).emit(messageType, data);\\r\\n    }\\r\\n}\\r\\n\\r\\nmodule.exports = GameServer\",\"module.exports = require(\\\"fs\\\");\",\"export const PlayerType = \\r\\n{\\r\\n  NONE: \\\"NONE\\\",\\r\\n  PLAYER: \\\"PLAYER\\\",\\r\\n  MASTER: \\\"MASTER\\\",\\r\\n  HOST: \\\"HOST\\\"\\r\\n};\\r\\n\\r\\nexport class ClientState {\\r\\n    constructor(socketID, ipaddress) {\\r\\n        this.socketID = socketID;\\r\\n        this.ipaddress = ipaddress;\\r\\n        this.connected = true;\\r\\n        this.playerType = PlayerType.NONE;\\r\\n      }\\r\\n\\r\\n      setPlayerType(playerType)\\r\\n      {\\r\\n        this.playerType = playerType;\\r\\n      }\\r\\n}\\r\\n\\r\\nexport class GameClient {\\r\\n    constructor(clientState) {\\r\\n        this.clientState = clientState;\\r\\n      }\\r\\n\\r\\n      handleMessage(data)\\r\\n      {\\r\\n          console.log(\\\"Message recieved - \\\" + JSON.stringify(data)); \\r\\n          var messageType = data.messageType;\\r\\n          switch(messageType)\\r\\n          {\\r\\n              case \\\"create\\\":\\r\\n                this.messageCreate(data);\\r\\n                break;\\r\\n            default:\\r\\n                break;\\r\\n          }\\r\\n      }\\r\\n\\r\\n      messageCreate(data)\\r\\n      {\\r\\n          this.clientState = data.clientState;\\r\\n      }\\r\\n\\r\\n      updateState(clientState)\\r\\n      {\\r\\n          this.clientState = clientState;\\r\\n      }\\r\\n}\\r\\n\\r\\nexport class GamePlayer extends GameClient\\r\\n{\\r\\n    constructor(clientState) {\\r\\n      super(clientState);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class GameMaster extends GameClient\\r\\n{\\r\\n    constructor(clientState) {\\r\\n        super(clientState);\\r\\n    }\\r\\n}\\r\\n\\r\\nexport class GameHost extends GameClient\\r\\n{\\r\\n    constructor(clientState) {\\r\\n        super(clientState);\\r\\n        this.playerList = null;\\r\\n    }\\r\\n\\r\\n    handleMessage(data)\\r\\n    {\\r\\n        console.log(\\\"Host Message recieved - \\\" + JSON.stringify(data)); \\r\\n        var messageType = data.messageType;\\r\\n        switch(messageType)\\r\\n        {\\r\\n            case \\\"refreshPlayers\\\":\\r\\n              this.refreshPlayers(data);\\r\\n              break;\\r\\n          default:\\r\\n              super.handleMessage(data);\\r\\n              break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    refreshPlayers(data)\\r\\n    {\\r\\n        console.log(\\\"New Player List - \\\" + JSON.stringify(data)); \\r\\n        if(data != null && data.playerList != null)\\r\\n            this.playerList = data.playerList;\\r\\n    }\\r\\n}\"]}","code":"!function(e){var t={};function s(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,\"a\",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p=\"\",s(s.s=0)}([function(e,t,s){const n=s(1),r=s(2),o=s(3),a=s(4),i=n(),l=r.createServer(i),c=o(l);i.get(\"*\",function(e,t){t.sendfile(\"./public/index.html\")});const u=new a(c);c.on(\"connection\",e=>{u.connectToGame(e),e.on(\"change color\",e=>{console.log(\"Color Changed to: \",e),c.sockets.emit(\"change color\",e)}),e.on(\"disconnect\",()=>{console.log(\"user disconnected\")})}),l.listen(4001,()=>console.log(\"Listening on port 4001\"))},function(e,t){e.exports=require(\"express\")},function(e,t){e.exports=require(\"http\")},function(e,t){e.exports=require(\"socket.io\")},function(e,t,s){s(5);var{ClientState:n,PlayerType:r}=s(6);const o={NONE:\"NONE\",WAITINGFORMASTER:\"WAITINGFORMASTER\",WAITINGFORPLAYERS:\"WAITINGFORPLAYERS\",READY:\"READY\",INGAME:\"INGAME\"};class a{constructor(){this.playmode=o.NONE,this.host=null,this.master=null,this.playerList=[]}setPlayMode(e){this.playmode=e,console.log(\"New Playmode \"+this.playmode)}addHost(e){console.log(\"Add Host\"),e.playerType=r.HOST,this.host=e,this.setPlayMode(o.WAITINGFORMASTER),this.playerList.push(e)}addMaster(e){console.log(\"Add Master\"),e.playerType=r.MASTER,this.master=e,this.setPlayMode(o.WAITINGFORPLAYERS),this.playerList.push(e)}addPlayer(e){console.log(\"Add Player\"),e.playerType=r.PLAYER,this.playerList.push(e)}addConnection(e){console.log(\"Add Connection \"+JSON.stringify(e,null,4)),this.playmode==o.NONE?this.addHost(e):this.playmode==o.WAITINGFORMASTER?this.addMaster(e):this.playmode==o.WAITINGFORPLAYERS&&this.addPlayer(e)}getHost(){return this.host}getMaster(){return this.master}getClient(e){var t;for(t=0;t<this.playerList.length;t++){console.log(\"ID To Find - \"+e);var s=this.playerList[t];if(console.log(\"PLAYER [\"+t+\"] \\n\"+JSON.stringify(s)),s.playerID===e)return this.playerList[t]}return null}getClientByIP(e){var t,s=-1;for(t=0;t<this.playerList.length;t++){console.log(\"IPAddress To Find - \"+e);var n=this.playerList[t];if(console.log(\"PLAYER [\"+t+\"] \\n\"+JSON.stringify(n)),n.ipaddress===e){if(-1!==s){console.log(\"Multiple Users Sharing IP\");break}s=t}}return-1!==s?this.playerList[s]:null}}class i{constructor(e){this.gameServer=e,this.gameState=new a,console.log(\"GameCreated \"+JSON.stringify(this.gameState,null,4)),this.playerCount=0}connect(e,t,s,n){var r=null;return null!==s&&(r=this.getClient(s)),null===r&&(r=this.getClientByIP(t)),null!==r&&(!1!==r.connection||null!==n&&r.playerType!==n?r=null:(r.socketID=e,r.ipaddress=ipaddress,r.connection=!0,this.sendCreateMessage(r))),null===r&&this.addConnection(e,t),r}addConnection(e,t){var s=new n(e,t);return this.gameState.addConnection(s),this.sendCreateMessage(s),s}getState(){return this.gameState}getHost(){return this.getState().getHost()}getMaster(){return this.getState().getMaster()}getClient(e){return this.getState().getClient(e)}getClientByIP(e){return this.getState().getClientByIP(e)}sendCreateMessage(e){var t={clientState:e};this.gameServer.sendMessage(e,\"create\",t)}refreshPlayerList(){var e=this.getState().getHost();if(null!=this.gameState&&null!=e){var t=this.gameState.playerList;if(null!=t)if(t.length!=this.playerCount){var s={playerList:t};this.gameServer.sendMessage(e,\"refreshPlayers\",s)}}}}e.exports=class{constructor(e){this.io=e,this.game=new i(this)}connectToGame(e){var t=e.handshake.query.UUID,s=e.handshake.query.playerType,n=e.request.connection.remoteAddress;this.game.connect(e.id,n,t,s)}sendMessage(e,t,s){console.log(\"Sending Msg - \"+e.playerType+\" - \"+t),s.messageType=t,null!=e&&this.io.to(`${e.socketID}`).emit(t,s)}}},function(e,t){e.exports=require(\"fs\")},function(e,t,s){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),t.PlayerType={NONE:\"NONE\",PLAYER:\"PLAYER\",MASTER:\"MASTER\",HOST:\"HOST\"};t.ClientState=class{constructor(e,s){this.socketID=e,this.ipaddress=s,this.connected=!0,this.playerType=t.PlayerType.NONE}setPlayerType(e){this.playerType=e}};class n{constructor(e){this.clientState=e}handleMessage(e){switch(console.log(\"Message recieved - \"+JSON.stringify(e)),e.messageType){case\"create\":this.messageCreate(e)}}messageCreate(e){this.clientState=e.clientState}updateState(e){this.clientState=e}}t.GameClient=n;t.GamePlayer=class extends n{constructor(e){super(e)}};t.GameMaster=class extends n{constructor(e){super(e)}};t.GameHost=class extends n{constructor(e){super(e),this.playerList=null}handleMessage(e){switch(console.log(\"Host Message recieved - \"+JSON.stringify(e)),e.messageType){case\"refreshPlayers\":this.refreshPlayers(e);break;default:super.handleMessage(e)}}refreshPlayers(e){console.log(\"New Player List - \"+JSON.stringify(e)),null!=e&&null!=e.playerList&&(this.playerList=e.playerList)}}}]);","extractedComments":[]}